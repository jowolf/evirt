section: declarations
action:
  load: declarations
iplast: 61
vmname: wordpress
ext: qc2
permanent: True
#size: 22G # 50G
ram: 3G
hdb: ""
---
section: start.sh
action:
  command:
    start:
        help: Start the VM, activate the tap interface
content: |
  # start.sh generated $date by eVirt

  tapif=tap-$iplast
  user=`whoami`
  echo TAP INTERFACE $tapif USER $user

  sudo ip tuntap add $tapif mode tap user $user
  sudo ip link set $tapif up
  sleep 0.2s
  sudo ip link set $tapif master br0

  log=$vmname.log
  kvm -daemonize -d unimp,guest_errors -D $log $parms -m $ram $cpu $vnc $mon $net $drives

  if ! $?; then {
    echo FAILED with code $?: kvm -daemonize -d unimp,guest_errors -D $log $parms -m $ram $cpu $vnc $mon $net $drives
  } fi
---
section: stop.sh
action:
  command:
    stop:
        help: Stop the VM, deactivate the tap interface
content: |
  # stop.sh generated $date by eVirt
  #echo Stopping $mname daemon...
  #daemon --stop --verbose -n $mname -P /vm/

  # nope, cut doesnt deal with eading spaces well - it moves the index
  # kill -HUP $(ps ax |grep $vmname |grep -v grep | cut -f 1 -d ' ')

  # so use awk
  sudo kill -HUP $(ps ax |grep $vmname |grep -v grep | awk '{ print $1; }' )

  ip tuntap del $1 mode tap

  #echo sudo brctl delif br0 tap-$ip
  #sudo brctl delif br0 tap-$ip
  #echo sudo ifconfig tap-$ip down
  #sudo ifconfig tap-$ip down
  #echo sudo tunctl -d tap-$ip
  #sudo tunctl -d tap-$ip

  #echo Replacing pingable IP br0:$ip...
  #sudo ifconfig br0:$ip 216.218.243.$ip netmask 255.255.255.255

  echo Done with $0 $vmname
---
section: status.sh
action:
  command:
    status:
        help: Show the status of the VM
content: |
  # status.sh generated $date by eVirt

  if test -s $vmname.log; then {
    echo "$vmname.log: `tail $vmname.log`"
    echo
  } fi

  if test -s evirt.log; then {
    echo "evirt.log: `tail evirt.log`"
    echo
  } fi

  echo "Image info: `qemu-img info $vmname.$ext`"
  echo

  s=`sudo ps -axw | grep $vmname |grep -v grep`

  if test -l s; then {
    echo VM is running:
    sudo ps -axw | grep $vmname |grep -v grep
  } else {
    echo VM not running.
  } fi
---
section: mount.sh
action:
  command:
    mount:
        help: Mount a guest file system to access the VM
content: |
  # mount.sh generated $date by eVirt
  echo Mounting guest FS for $vmname
  mkdir -p .mount
  guestmount -a $vmname.$ext -i --rw .mount
---
section: unmount.sh
action:
  command:
    unmount:
        help: Unmount a previously mounted guest file system
content: |
  # unmount.sh generated $date by eVirt
  echo Unmounting guest FS for $vmname
  umount .mount
  rmdir .mount
---
section: all.sh
action:
  command:
    #default:
    all:
        help: Show all running VMs
content: |
  # default.sh generated $date by eVirt
  #ps axw | grep kvm | grep -v grep
  #sudo netstat -antp
  ps axw | grep qemu | grep -v grep
  sudo netstat -antp |grep qemu
