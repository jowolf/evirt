section: userdata.yaml
action:
  save: $workdir
content: |
  #cloud-config
  hostname: $vmname
  timezone: US/Pacific
  #apt_upgrade: true
  byobu_by_default: system
  ssh_import_id: [$user]
  #apt_sources:
  # - source: "ppa:smoser/ppa"
  swap: # only works on cloud-init 0.7.6 and later, trusty 14.04.5 is on 0.7.5 :-/
     filename: /swap.img
     size: "auto" # or size in bytes
     maxsize: 2147483648  # 8G should work, see https://bugs.launchpad.net/ubuntu/+source/cloud-init/+bug/1410824
  groups:
    - $user: [sys, docker]
  users:
    - name: $user
      gecos: $user
      shell: /bin/bash
      primary-group: $user
      groups: [users, root, kvm, sudo, adm, audio, cdrom, dialout, floppy, video, plugdev, dip, netdev]
      lock-passwd: false
      passwd: '$6$rounds=4096$9HeOrRyXEKcTYA5h$mjWahfdV6X.lIiyDwRc/6hXv.7UJCH55XZbHgOOTG3yRh/3vOg5iEukKwYV8kURYtE.GuE/SGI0sUCSAqAgkS.'
      ssh-authorized-keys:
        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+xUBBvQ7+5WiKLSsBUrIbqyecadH+FFSJzrvA43hxM+z1LP5G0CnMHFVIYF68b58rzPvWurYshCRwOf6Z0ZOc0IAqyOxRQeIG6hphT5TfL+gB+h/BJ+YaWxNR0s7EJYr/2hWUP0j1xJ6EFt1EUH9p5vi4tRo1NcX7syxQUmedtkLrOgM7p5wAbcNGkjog8SmMyHyMZD5yQPt7kbkz2qUmZzf2CNR4aUZEoJnvyLoXDrz1OxZPklcjeXVUH7w91WKPIrTm+lt4xOn0XuCqmHzIlNixyHTBOrdoDuRbejhn/UOFswb3YFRMLczK6f3N+UqqpV9PAErK9QGOAyEjLRHZ root@mintstudio-maya
        - $key
      sudo: ALL=(ALL) NOPASSWD:ALL
  package_update: true
  package_upgrade: true
  #salt-minion:
  #  - see https://github.com/number5/cloud-init/blob/master/doc/examples/cloud-config-salt-minion.txt
  packages:
    - mc
    - python-pip
    - python-virtualenv
    - unp
    - git
    - docker.io
  write_files:
    - path: /home/$user/go.sh
      permissions: '0770'
      content: |
        #!/bin/env python
        import os, fcntl, termios
        tty = os.ttyname(sys.stdin.fileno())
        with open (tty, 'w') as fd:
          for c in ". env/bin/activate\n":
            fcntl.ioctl (fd, termios.TIOCSTI, c)
    - path: /root/cloud-init-runcmd.sh
      permissions: '0770'
      comment: |
        cd /root
        echo IN ROOT INSTALLING SALT
        pwd
        id
        ifdown ens3; ifup ens3
        ifconfig -a
        curl -L https://bootstrap.saltstack.com -o install_salt.sh
        sudo sh install_salt.sh -U -P -A desqhost.com -i $host
        echo SETTING UP SALT KEYS AND REPOS
        chmod 400 /root/.ssh/id_rsa_jjw-salt-deploy
        chmod 400 /root/.ssh/id_rsa_eracks-deploy
        echo "cp is necessary here due to write_files bug, it's done before user creation, and creates the joe home dir owned by root"
        cp /root/.ssh/id_rsa_eracks-deploy /home/joe/.ssh/id_rsa_eracks-deploy
        echo tail -f /var/log/cloud-init-output.log >> /home/joe/.bash_history
        echo less /var/log/cloud-init-output.log >> /home/joe/.bash_history
        ssh-keyscan -H github.com >>/root/.ssh/known_hosts
        - - -
        ssh-agent bash -c 'ssh-add .ssh/id_rsa_jjw-salt-deploy && git clone -q git@github.com:jowolf/jjw-salt-master.git'
        #echo SETTING UP ERACKS REPO
        #sudo -iu joe ssh-agent bash -c 'ssh-add .ssh/id_rsa_eracks-deploy && git clone -q git@github.com:jowolf/eracks11.git'
        echo SETTING UP TLG REPO
        git clone -q git@github.com:jowolf/tlg.git
        chown -R joe:joe /home/joe
        echo APPLYING SALT STATES
        cd jjw-salt-master/salt
        salt-call --local --file-root=. state.apply joe
        salt-call --local --file-root=. state.apply salt-minion
        salt-call --local --file-root=. state.apply hostname-from-minion-id
      content: |
        cd /home/$user

        echo DOING_KEYSCAN
        touch DOING_KEYSCAN
        sudo -u $user ssh-keyscan -H github.com >>/home/$user/.ssh/known_hosts
        echo DONE >> DOING_KEYSCAN

        echo PRECONFIG_BASH_HISTORY
        touch PRECONFIG_BASH_HISTORY
        echo tail -f /var/log/cloud-init-output.log >> /home/$user/.bash_history
        echo less /var/log/cloud-init-output.log >> /home/$user/.bash_history
        echo DONE >> PRECONFIG_BASH_HISTORY

        # now used only for salt
        echo CLONE_GIT_REPO
        touch CLONE_GIT_REPO
        #ssh-agent bash -c 'ssh-add $git_repo_key && git clone -q $git_repo' >> CLONE_GIT_REPO
        # do them separately so we can do pub repos w/o key
        ssh-agent bash -c 'ssh-add $git_repo_key >> CLONE_GIT_REPO'
        ssh-agent bash -c 'git clone -q $git_repo >> CLONE_GIT_REPO'
        echo DONE >> CLONE_GIT_REPO

        echo SETTING_UP_DOCKER_COMPOSE
        touch SETTING_UP_DOCKER_COMPOSE
        # sudo apt-get install python-virtualenv
        virtualenv -v env
        #./go.sh
        . env/bin/activate
        pip install docker-compose >> SETTING_UP_DOCKER_COMPOSE
        echo DONE >> SETTING_UP_DOCKER_COMPOSE

        echo CHOWN_$user
        touch CHOWN_$user
        sudo chown -R $user:$user /home/$user
        echo DONE >> CHOWN_$user

        echo DOING_STARTUP_COMMANDS
        sudo -u $user sh -c "sh startup.sh >> DOING_STARTUP_COMMANDS"
        echo DONE >> DOING_STARTUP_COMMANDS

        # now done in strtup commands above
        #echo DOING_DOCKER_COMPOSE_BUILD
        #docker-compose up --build >> DOING_DOCKER_COMPOSE_BUILD
        #echo DONE >> DOING_DOCKER_COMPOSE_BUILD

        # old nextcloud stuff:
        #docker pull filcuc/nextcloud:latest
        #docker create --name nextcloud-data filcuc/nextcloud:latest /bin/true
        #docker run -ti --rm --volumes-from nextcloud-data --name nextcloud-app -p 80:80 -p 443:443 filcuc/nextcloud:latest setup --nc-db='pgsql' --nc-db-user='nextcloud' --nc-db-pass='nextcloud' --nc-db-name='nextcloud' --nc-url='https://download.nextcloud.com/server/releases/nextcloud-9.0.53.tar.bz2' --nc-archive='nextcloud-9.0.53.tar.bz2' --nc-admin-name='admin' --nc-admin-pass='admin' --nc-dir-name='nextcloud' --ng-root='/var/www/' --ng-user='www-data' --ng-domain='jw.vc'
        # --le-email='j@jw.vc'
        exit
    $file1
    $file2
    $file3
    $file4
    $file5
    $file6
    $file7
    $file8
  comment: |
    comments ANYWHERE in the runcmd list break the module - sheesh.
    echo Wow! comments break the runcmd of cloudinit: \# $cmd2 $cmd3 etc
  runcmd:
    - cd /root
    - echo RUNNING_RUNCMD_SCRIPT
    - touch RUNNING_RUNCMD_SCRIPT
    - bash cloud-init-runcmd.sh >>RUNNING_RUNCMD_SCRIPT
    - echo DONE >>RUNNING_RUNCMD_SCRIPT
---
section: metadata.yaml
action:
  save: $workdir
content: |
  #dsmode: local
  instance-id: $vmname;
  network-interfaces: |
    auto ens3
    #iface ens3 inet dhcp
    iface ens3 inet static
      # for local VMs, at least on LGram, this is the lxc bridge nw
      address 10.0.3.$iplast
    #  address 216.172.133.$iplast
    #  #network 216.172.133.0
      netmask 255.255.255.0
    #  #broadcast 216.172.133.255
    #  gateway 216.172.133.1
      gateway 10.0.3.1
      dns-nameservers 72.13.81.2 72.13.91.2 1.1.1.1 8.8.8.8 4.2.2.1 4.2.2.2 4.2.2.3
  local-hostname: $vmname
---
section: download.sh
action:
  command:
    download:
        help: Download the bootable image defined in declarations
content: |
  # download.sh generated $date by eVirt

  # Convert python-replaced variable into bash var:
  #   could call it 'baseimage', but that has two meanings -
  #   the base image itself, or the basename of the image url
  #${image="$image"}
  image="$image"

  # For now, assumes .img - see notes / todo
  fname=`basename $image`

  echo IMAGE FILENAME $fname

  # Check for remote / downloadable:
  #if test ${image:0:4} != http; then {
  #  echo Image $image is local - not downloading
  #  exit
  #} fi

  # download image as basename
  if ( ls $fname || ls $installdir/$fname ); then
    echo DOWNLOADED BASE IMAGE PRESENT - NOT DOWNLOADING!
  else
    echo Downloading: $image
    wget -O $fname $image
  fi
---
section: build.sh
action:
  command:
    build:
        help: Build / make new VM from ev.yaml using cloud-init, userdata, metadata, and declarations.
        #metavar: make-new-vm
content: |
  # build.sh - generated $date by eVirt
  # copy downloaded image as $vmname.$ext

  # For now, assumes .img - see notes / todo
  fname=`basename $image`

  if ( ls -l $vmname.img ); then
    echo VM IMAGE PRESENT - NOT COPYING!
  else
    # copy from image location:
    #echo $image
    #echo $fname
    #echo test -e $fname

    if test -e $fname; then
      echo Copying from downloaded base image...
      cp $fname $vmname.img
    elif test -e $installdir/$fname; then
      echo Copying from downloaded base image in eVirt Install dir...
      cp $installdir/$fname $vmname.img
    else
      echo No downloaded image file present - $image
    fi
  fi

  if test $ext == qc2; then {
    qemu-img convert -O qcow2 -c $vmname.img $vmname.qc2
  } fi

  qemu-img resize $vmname.$ext $size
  cloud-localds $workdir/cloudinit.img $workdir/userdata.yaml # $workdir/metadata.yaml
  qemu-img convert -O qcow2 -c .evirt/cloudinit.img .evirt/cloudinit.qc2

