NOTE:  Nothing here that isn't in base or build - need usbdevice tablet, and rdp conncection -
Both of those can be in declarations

delete:

section: start.sh
action:
  command:
    start:
        help: Start the VM
content: |
  # start.sh generated $date by eVirt
  log=$vmname.log
  #daemon="daemon -D $vmdir -n $vmname -o $log -l $log --verbose -- "
  #command="$daemon kvm $parms $vnc $mon $net $hda"
  kvm -daemonize -d unimp,guest_errors -D $log $parms -m $ram $vnc $mon $net $drives
  #>$vmname.out 2>$vmname.err
  #2>&1 >$vmname.log
---
section: stop.sh
action:
  command:
    stop:
        help: Stop the VM
content: |
  # stop.sh generated $date by eVirt
  #echo Stopping $mname daemon...
  #daemon --stop --verbose -n $mname -P /vm/

  # nope, cut doesnt deal with eading spaces well - it moves the index
  # kill -HUP $(ps ax |grep $vmname |grep -v grep | cut -f 1 -d ' ')

  # so use awk
  sudo kill -HUP $(ps ax |grep $vmname |grep -v grep | awk '{ print $1; }' )

  echo sudo brctl delif br0 tap-$ip
  sudo brctl delif br0 tap-$ip
  echo sudo ifconfig tap-$ip down
  sudo ifconfig tap-$ip down
  echo sudo tunctl -d tap-$ip
  sudo tunctl -d tap-$ip

  #echo Replacing pingable IP br0:$ip...
  #sudo ifconfig br0:$ip 216.218.243.$ip netmask 255.255.255.255

  echo Done with $0 $mname
---
section: status.sh
action:
  command:
    status:
        help: Show the status of the VM
content: |
  # status.sh generated $date by eVirt
  echo $vmname log:
  echo
  tail $vmname.log
  echo
  echo eVirt log:
  echo
  tail evirt.log
  echo
  echo sudo ps -axw | grep $vmname |grep -v grep
  sudo ps -axw | grep $vmname |grep -v grep
---
section: mount.sh
action:
  command:
    mount:
        help: Mount a guest file system to access the VM
content: |
  # mount.sh generated $date by eVirt
  echo Mounting guest FS for $vmname
  mkdir -p .mount
  #guestmount -a $vmname.img -i --ro .mount
  guestmount -a $vmname.img -i -w .mount
---
section: unmount.sh
action:
  command:
    unmount:
        help: Unmount a previously mounted guest file system
content: |
  # unmount.sh generated $date by eVirt
  echo Unmounting guest FS for $vmname
  umount .mount
  rmdir .mount
---
section: download.sh
action:
  command:
    download:
        help: Download the bootable image defined in declarations
content: |
  # download.sh generated $date by eVirt

  # Convert python-replaced variable into bash var:
  ${image="$image"}

  echo IMAGE ${image}

  # Check for remote / downloadable:
  if ! ( ${image:0:4} == 'http' ); then {
    echo Image $image is local - not downloading
    exit
  } fi

  # download image as basename
  if ( ls -l `basename $image` ); then
    echo IMAGE PRESENT - NOT DOWNLOADING!
  else
    echo Downloading: $image
    wget -O `basename $image` $image
  fi
---
section: build.sh
action:
  command:
    build:
        help: Build / make new VM from ev.yaml using cloud-init, userdata, metadata, and declarations.
        #metavar: make-new-vm
content: |
  # copy downloaded image as $vmname.img
  if ( ls -l $vmname.img ); then
    echo IMAGE PRESENT - NOT COPYING!
  else
    # copy from image location:
    cp `basename $image` $vmname.img
  fi

  qemu-img resize $vmname.img $size
  cloud-localds $workdir/cloudinit.img $workdir/userdata.yaml # $workdir/metadata.yaml
  qemu-img convert -O qcow2 -c .evirt/cloudinit.img .evirt/cloudinit.qc2
  #qemu-img convert -O qcow2 -c $vmname.img $vmname.qc2
---
section: default.sh
action:
  command:
    default:
        help: Show running VMs
content: |
  echo All VMs:
  ps axw |grep kvm | grep -v grep

  echo
  echo This VM:
  ps axw | grep $vmname | grep -v grep
  exit

  # old setup:
  # copy ev.yaml fropm install dir
   if ( ls -l ev.yaml ); then
    echo EV.YAML ALREADY PRESENT - NOT OVERWRITING!
  else
    # copy from install location:
    cp `dirname $0` $vmname.img
  fi
